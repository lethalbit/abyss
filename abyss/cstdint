/* SPDX-License-Identifier: BSD-3-Clause */
#pragma once
#if !defined(ABYSS_CSTDINT)
#define ABYSS_CSTDINT

#include <abyss/cosmogony/compiler_support.hh>

__ABYSS_SYSTEM_HEADER()

#undef INT8_MAX
#undef INT8_MIN
#if defined(__INT8_MAX__)
#	define INT8_MAX __INT8_MAX__
#	define INT8_MIN (-INT8_MAX - 1)
#else
#	define INT8_MAX 0x7F
#	define INT8_MIN 0x80
#endif

#undef INT16_MAX
#undef INT16_MIN
#if defined(__INT16_MAX__)
#	define INT16_MAX __INT16_MAX__
#	define INT16_MIN (-INT16_MAX - 1)
#else
#	define INT16_MAX 0x7FFF
#	define INT16_MIN 0x8000
#endif

#undef INT32_MAX
#undef INT32_MIN
#if defined(__INT32_MAX__)
#	define INT32_MAX __INT32_MAX__
#	define INT32_MIN (-INT32_MAX - 1)
#else
#	define INT32_MAX 0x7FFF'FFFF
#	define INT32_MIN 0x8000'0000
#endif

#undef INT64_MAX
#undef INT64_MIN
#if defined(__INT64_MAX__)
#	define INT64_MAX __INT64_MAX__
#	define INT64_MIN (-INT64_MAX - 1)
#else
#	define INT64_MAX 0x7FFF'FFFF'FFFF'FFFFLL
#	define INT64_MIN 0x8000'0000'0000'0000LL
#endif

#undef UINT8_MAX
#if defined(__UINT8_MAX__)
#	define UINT8_MAX __UINT8_MAX__
#else
#	define UINT8_MAX 0xFF
#endif

#undef UINT16_MAX
#if defined(__UINT16_MAX__)
#	define UINT16_MAX __UINT16_MAX__
#else
#	define UINT16_MAX 0xFFFF
#endif

#undef UINT32_MAX
#if defined(__UINT32_MAX__)
#	define UINT32_MAX __UINT32_MAX__
#else
#	define UINT32_MAX 0xFFFF'FFFFU
#endif

#undef UINT64_MAX
#if defined(__UINT64_MAX__)
#	define UINT64_MAX __UINT64_MAX__
#else
#	define UINT64_MAX 0xFFFF'FFFF'FFFF'FFFFUL
#endif

#undef INT_LEAST8_MAX
#undef INT_LEAST8_MIN
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)

#undef INT_LEAST16_MAX
#undef INT_LEAST16_MIN
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)

#undef INT_LEAST32_MAX
#undef INT_LEAST32_MIN
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)

#undef INT_LEAST64_MAX
#undef INT_LEAST64_MIN
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)

#undef UINT_LEAST8_MAX
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__

#undef UINT_LEAST16_MAX
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__

#undef UINT_LEAST32_MAX
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__

#undef UINT_LEAST64_MAX
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__

#undef INT_FAST8_MAX
#undef INT_FAST8_MIN
#define INT_FAST8_MAX __INT_FAST8_MAX__
#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)

#undef INT_FAST16_MAX
#undef INT_FAST16_MIN
#define INT_FAST16_MAX __INT_FAST16_MAX__
#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)

#undef INT_FAST32_MAX
#undef INT_FAST32_MIN
#define INT_FAST32_MAX __INT_FAST32_MAX__
#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)

#undef INT_FAST64_MAX
#undef INT_FAST64_MIN
#define INT_FAST64_MAX __INT_FAST64_MAX__
#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)

#undef UINT_FAST8_MAX
#define UINT_FAST8_MAX __UINT_FAST8_MAX__

#undef UINT_FAST16_MAX
#define UINT_FAST16_MAX __UINT_FAST16_MAX__

#undef UINT_FAST32_MAX
#define UINT_FAST32_MAX __UINT_FAST32_MAX__

#undef UINT_FAST64_MAX
#define UINT_FAST64_MAX __UINT_FAST64_MAX__

#if defined(__INTPTR_MAX__)
#	undef INTPTR_MAX
#	undef INTPTR_MIN
#	define INTPTR_MAX __INTPTR_MAX__
#	define INTPTR_MIN (-INTPTR_MAX - 1)
#endif

#if defined(__UINTPTR_MAX__)
#	undef UINTPTR_MAX
#	define UINTPTR_MAX __UINTPTR_MAX__
#endif

#undef PTRDIFF_MAX
#undef PTRDIFF_MIN
#define PTRDIFF_MAX __PTRDIFF_MAX__
#define PTRDIFF_MIN (-__PTRDIFF_MAX__ - 1)

#undef SIG_ATOMIC_MAX
#undef SIG_ATOMIC_MIN
#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__
#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__

#undef SIZE_MAX
#define SIZE_MAX __SIZE_MAX__

#undef WCHAR_MAX
#undef WCHAR_MIN
#define WCHAR_MAX __WCHAR_MAX__
#define WCHAR_MIN __WCHAR_MIN__

#undef WINT_MAX
#undef WINT_MIN
#define WINT_MAX __WINT_MAX__
#define WINT_MIN __WINT_MIN__

/* WARN(aki): The fallbacks for the GCC builtins are, once again, just assumptions */
// NOLINTBEGIN(cppcoreguidelines-macro-usage)
#undef INT8_C
#if defined(__INT8_C)
#	define INT8_C(c) __INT8_C(c)
#else
#	define INT8_C(c) c
#endif
#undef INT16_C
#if defined(__INT16_C)
#	define INT16_C(c) __INT16_C(c)
#else
#	define INT16_C(c) c
#endif
#undef INT32_C
#if defined(__INT32_C)
#	define INT32_C(c) __INT32_C(c)
#else
#	define INT32_C(c) c
#endif
#undef INT64_C
#if defined(__INT64_C)
#	define INT64_C(c) __INT64_C(c)
#else
#	define INT64_C(c) c ## L
#endif

#undef UINT8_C
#if defined(__UINT8_C)
#	define UINT8_C(c) __UINT8_C(c)
#else
#	define UINT8_C(c) c
#endif
#undef UINT16_C
#if defined(__UINT16_C)
#	define UINT16_C(c) __UINT16_C(c)
#else
#	define UINT16_C(c) c
#endif
#undef UINT32_C
#if defined(__UINT32_C)
#	define UINT32_C(c) __UINT32_C(c)
#else
#	define UINT32_C(c) c ## U
#endif
#undef UINT64_C
#if defined(__UINT64_C)
#	define UINT64_C(c) __UINT64_C(c)
#else
#	define UINT64_C(c) c ## UL
#endif

#undef INTMAX_C
#if defined(__INTMAX_C)
#	define INTMAX_C(c) __INTMAX_C(c)
#else
#	define INTMAX_C(c) c ## L
#endif
#undef UINTMAX_C
#if defined(__UINTMAX_C)
#	define UINTMAX_C(c) __UINTMAX_C(c)
#else
#	define UINTMAX_C(c) c ## UL
#endif
// NOLINTEND(cppcoreguidelines-macro-usage)

namespace std {
	/* WARN(aki): The fallbacks for GCC builtins are just assumptions */
#if defined(__INT8_TYPE__)
	using int8_t = __INT8_TYPE__;
#else
	using int8_t = signed char;
#endif
#if defined(__INT16_TYPE__)
	using int16_t = __INT16_TYPE__;
#else
	using int16_t = short int;
#endif
#if defined(__INT32_TYPE__)
	using int32_t = __INT32_TYPE__;
#else
	using int32_t = int;
#endif
#if defined(__INT64_TYPE__)
	using int64_t = __INT64_TYPE__;
#else
	using int64_t = long int;
#endif
#if defined(__UINT8_TYPE__)
	using uint8_t = __UINT8_TYPE__;
#else
	using uint8_t = unsigned char;
#endif
#if defined(__UINT16_TYPE__)
	using uint16_t = __UINT16_TYPE__;
#else
	using uint16_t = short unsigned int;
#endif
#if defined(__UINT32_TYPE__)
	using uint32_t = __UINT32_TYPE__;
#else
	using uint32_t = unsigned int;
#endif
#if defined(__UINT64_TYPE__)
	using uint64_t = __UINT64_TYPE__;
#else
	using uint64_t = long unsigned int;
#endif

	/* NOTE(aki): There are no fallbacks for the items below. They need to be explicitly compiler provided */
	using int_least8_t   = __INT_LEAST8_TYPE__;
	using int_least16_t  = __INT_LEAST16_TYPE__;
	using int_least32_t  = __INT_LEAST32_TYPE__;
	using int_least64_t  = __INT_LEAST64_TYPE__;
	using uint_least8_t  = __UINT_LEAST8_TYPE__;
	using uint_least16_t = __UINT_LEAST16_TYPE__;
	using uint_least32_t = __UINT_LEAST32_TYPE__;
	using uint_least64_t = __UINT_LEAST64_TYPE__;

	using int_fast8_t   = __INT_FAST8_TYPE__;
	using int_fast16_t  = __INT_FAST16_TYPE__;
	using int_fast32_t  = __INT_FAST32_TYPE__;
	using int_fast64_t  = __INT_FAST64_TYPE__;
	using uint_fast8_t  = __UINT_FAST8_TYPE__;
	using uint_fast16_t = __UINT_FAST16_TYPE__;
	using uint_fast32_t = __UINT_FAST32_TYPE__;
	using uint_fast64_t = __UINT_FAST64_TYPE__;

#if defined(__INTPTR_TYPE__)
	using intptr_t = __INTPTR_TYPE__;
#endif
#if defined(__UINTPTR_TYPE__)
	using uintptr_t = __UINTPTR_TYPE__;
#endif

	using intmax_t = __INTMAX_TYPE__;
	using uintmax_t = __UINTMAX_TYPE__;
	}

#endif /* ABYSS_CSTDINT */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
