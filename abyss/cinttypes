/* SPDX-License-Identifier: BSD-3-Clause */
#pragma once
#if !defined(ABYSS_CINTTYPES)
#define ABYSS_CINTTYPES

#include <abyss/cosmogony/compiler_support.hh>
#include <abyss/cosmogony/library_config.hh>

#include <abyss/cstdint>

__ABYSS_SYSTEM_HEADER()

// NOLINTBEGIN(cppcoreguidelines-macro-usage)

#define PRId8 "d"
#define PRIi8 "i"
#define PRIu8 "u"
#define PRIo8 "o"
#define PRIx8 "x"
#define PRIX8 "X"

#define PRId16 "d"
#define PRIi16 "i"
#define PRIu16 "u"
#define PRIo16 "o"
#define PRIx16 "x"
#define PRIX16 "X"

#define PRId32 "d"
#define PRIi32 "i"
#define PRIu32 "u"
#define PRIo32 "o"
#define PRIx32 "x"
#define PRIX32 "X"

#define PRId64 "ld"
#define PRIi64 "li"
#define PRIu64 "lu"
#define PRIo64 "lo"
#define PRIx64 "lx"
#define PRIX64 "lX"

#define PRIdLEAST8 PRId8
#define PRIiLEAST8 PRIi8
#define PRIuLEAST8 PRIu8
#define PRIoLEAST8 PRIo8
#define PRIxLEAST8 PRIx8
#define PRIXLEAST8 PRIX8

#define PRIdLEAST16 PRId16
#define PRIiLEAST16 PRIi16
#define PRIuLEAST16 PRIu16
#define PRIoLEAST16 PRIo16
#define PRIxLEAST16 PRIx16
#define PRIXLEAST16 PRIX16

#define PRIdLEAST32 PRId32
#define PRIiLEAST32 PRIi32
#define PRIuLEAST32 PRIu32
#define PRIoLEAST32 PRIo32
#define PRIxLEAST32 PRIx32
#define PRIXLEAST32 PRIX32

#define PRIdLEAST64 PRId64
#define PRIiLEAST64 PRIi64
#define PRIuLEAST64 PRIu64
#define PRIoLEAST64 PRIo64
#define PRIxLEAST64 PRIx64
#define PRIXLEAST64 PRIX64

#define PRIdFAST8 PRId8
#define PRIiFAST8 PRIi8
#define PRIuFAST8 PRIu8
#define PRIoFAST8 PRIo8
#define PRIxFAST8 PRIx8
#define PRIXFAST8 PRIX8

#define PRIdFAST16 PRId16
#define PRIiFAST16 PRIi16
#define PRIuFAST16 PRIu16
#define PRIoFAST16 PRIo16
#define PRIxFAST16 PRIx16
#define PRIXFAST16 PRIX16

#define PRIdFAST32 PRId32
#define PRIiFAST32 PRIi32
#define PRIuFAST32 PRIu32
#define PRIoFAST32 PRIo32
#define PRIxFAST32 PRIx32
#define PRIXFAST32 PRIX32

#define PRIdFAST64 PRId64
#define PRIiFAST64 PRIi64
#define PRIuFAST64 PRIu64
#define PRIoFAST64 PRIo64
#define PRIxFAST64 PRIx64
#define PRIXFAST64 PRIX64

#define PRIdMAX "ld"
#define PRIiMAX "li"
#define PRIuMAX "lu"
#define PRIoMAX "lo"
#define PRIxMAX "lx"
#define PRIXMAX "lX"

#define PRIdPTR "ld"
#define PRIiPTR "li"
#define PRIuPTR "lu"
#define PRIoPTR "lo"
#define PRIxPTR "lx"
#define PRIXPTR "lX"

/* scanf macros */

#define SCNd8 "hhd"
#define SCNi8 "hhi"
#define SCNu8 "hhu"
#define SCNo8 "hho"
#define SCNx8 "hhx"

#define SCNd16 "hd"
#define SCNi16 "hi"
#define SCNu16 "hu"
#define SCNo16 "ho"
#define SCNx16 "hx"

#define SCNd32 "d"
#define SCNi32 "i"
#define SCNu32 "u"
#define SCNo32 "o"
#define SCNx32 "x"

#define SCNd64 "ld"
#define SCNi64 "li"
#define SCNu64 "lu"
#define SCNo64 "lo"
#define SCNx64 "lx"

#define SCNdLEAST8 SCNd8
#define SCNiLEAST8 SCNi8
#define SCNuLEAST8 SCNu8
#define SCNoLEAST8 SCNo8
#define SCNxLEAST8 SCNx8

#define SCNdLEAST16 SCNd16
#define SCNiLEAST16 SCNi16
#define SCNuLEAST16 SCNu16
#define SCNoLEAST16 SCNo16
#define SCNxLEAST16 SCNx16

#define SCNdLEAST32 SCNd32
#define SCNiLEAST32 SCNi32
#define SCNuLEAST32 SCNu32
#define SCNoLEAST32 SCNo32
#define SCNxLEAST32 SCNx32

#define SCNdLEAST64 SCNd64
#define SCNiLEAST64 SCNi64
#define SCNuLEAST64 SCNu64
#define SCNoLEAST64 SCNo64
#define SCNxLEAST64 SCNx64

#define SCNdFAST8 SCNd8
#define SCNiFAST8 SCNi8
#define SCNuFAST8 SCNu8
#define SCNoFAST8 SCNo8
#define SCNxFAST8 SCNx8

#define SCNdFAST16 SCNd16
#define SCNiFAST16 SCNi16
#define SCNuFAST16 SCNu16
#define SCNoFAST16 SCNo16
#define SCNxFAST16 SCNx16

#define SCNdFAST32 SCNd32
#define SCNiFAST32 SCNi32
#define SCNuFAST32 SCNu32
#define SCNoFAST32 SCNo32
#define SCNxFAST32 SCNx32

#define SCNdFAST64 SCNd64
#define SCNiFAST64 SCNi64
#define SCNuFAST64 SCNu64
#define SCNoFAST64 SCNo64
#define SCNxFAST64 SCNx64

#define SCNdMAX "ld"
#define SCNiMAX "li"
#define SCNuMAX "lu"
#define SCNoMAX "lo"
#define SCNxMAX "lx"

#define SCNdPTR "ld"
#define SCNiPTR "li"
#define SCNuPTR "lu"
#define SCNoPTR "lo"
#define SCNxPTR "lx"

// NOLINTEND(cppcoreguidelines-macro-usage)

namespace std {
	struct imaxdiv_t final {
		std::intmax_t quot;
		std::intmax_t rem;
	};

	/* TODO(aki): Runtime functions */
#if defined(ABYSS_RUNTIME_SUPPORT)
	/* std::intmax_t abs(std::intmax_t value);                                 */
	/* std::intmax_t imaxabs(std::intmax_t value);                             */

	/* std::imaxdiv_t div(std::intmax_t value);                                */
	/* std::imaxdiv_t imaxdiv(std::intmax_t value);                            */

	/* std::intmax_t strtoimax(const char* ptr, char** eptr, int base);        */
	/* std::uintmax_t strtoumax(const char* ptr, char** eptr, int base);       */

	/* std::intmax_t wcstoimax(const wchar_t* ptr, wchar_t** eptr, int base);  */
	/* std::uintmax_t wcstoumax(const wchar_t* ptr, wchar_t** eptr, int base); */
#endif

};

#endif /* ABYSS_CINTTYPES */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
