/* SPDX-License-Identifier: BSD-3-Clause */
// NOLINTBEGIN(cppcoreguidelines-macro-usage)
#pragma once
#if !defined(ABYSS_CLIMITS)
#define ABYSS_CLIMITS

#if !defined(MB_LEN_MAX)
#	define MB_LEN_MAX 1
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__INT_MAX__)
#	undef INT_MAX
#	undef INT_MIN
#	undef UINT_MAX
#	define INT_MAX __INT_MAX__
#	define INT_MIN (-INT_MAX - 1)
#	define UINT_MAX (((unsigned int)INT_MAX << 1U) + 1U)
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__SHRT_MAX__)
#	undef SHRT_MAX
#	undef SHRT_MIN
#	define SHRT_MAX __SHRT_MAX__
#	define SHRT_MIN (-SHRT_MAX - 1)
#	undef USHRT_MAX
#	if SHRT_MAX == INT_MAX
#		define USHRT_MAX (((unsigned short)SHRT_MAX << 1U) + 1U)
#	else
#		define USHRT_MAX (((unsigned short)SHRT_MAX << 1) + 1)
#	endif
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__LONG_MAX__)
#	undef LONG_MAX
#	undef LONG_MIN
#	undef ULONG_MAX
#	define LONG_MAX __LONG_MAX__
#	define LONG_MIN (-LONG_MAX - 1L)
#	define ULONG_MAX (((unsigned long)LONG_MAX << 1UL) + 1UL)
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__LLONG_MAX__)
#	undef LLONG_MAX
#	undef LLONG_MIN
#	undef ULLONG_MAX
#	define LLONG_MAX __LLONG_MAX__
#	define LLONG_MIN (-LLONG_MAX - 1LL)
#	define ULLONG_MAX (((unsigned long long)LLONG_MAX ULL << 1ULL) + 1ULL)
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__LONG_LONG_MAX__)
#	undef LLONG_MAX
#	undef LLONG_MIN
#	undef ULLONG_MAX
#	define LLONG_MAX __LONG_LONG_MAX__
#	define LLONG_MIN (-LLONG_MAX - 1)
#	define ULLONG_MAX (((unsigned long long)LLONG_MAX << 1ULL) + 1ULL)
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__CHAR_BIT__)
#	undef CHAR_BIT
#	define CHAR_BIT __CHAR_BIT__
#endif

/* XXX(aki): This relies on a GCC builtin  */
#if defined(__SCHAR_MAX__)
#	undef SCHAR_MAX
#	undef SCHAR_MIN
#	undef UCHAR_MAX
#	define SCHAR_MAX __SCHAR_MAX__
#	define SCHAR_MIN (-SCHAR_MAX - 1)
#	if SCHAR_MAX == INT_MAX
#		define UCHAR_MAX UINT_MAX
#	else
#		define UCHAR_MAX (((unsigned char)SCHAR_MAX << 1) + 1)
#	endif
#endif

/* XXX(aki): This relies on a GCC builtin  */
#undef CHAR_MAX
#undef CHAR_MIN
#if defined(__CHAR_UNSIGNED__)
#	if SCHAR_MAX == INT_MAX
#		define CHAR_MIN 0U
#	else
#		define CHAR_MIN 0
#	endif
#	define CHAR_MAX UCHAR_MAX
#else
#	define CHAR_MAX SCHAR_MAX
#	define CHAR_MIN SCHAR_MIN
#endif

#endif /* ABYSS_CLIMITS */
// NOLINTEND(cppcoreguidelines-macro-usage)
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
